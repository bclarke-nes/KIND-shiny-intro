#outcome summary

# s1
# like R - general syntax, packages
# unlike R - reactive, interactive, UI

# this session aims: familiarisation, terminology, R vs Shiny
# milestones, app.R, hello world, displaying some R output, bring data into Shiny, adding interactivity, first reactivity
# reading: https://mastering-shiny.org/basic-app.html mastering shiny chapter 1, https://shiny.rstudio.com/images/shiny-cheatsheet.pdf

# welcome and troubleshooting ----

# app.R ----
# 1 create a new file and add shiny boilerplate from snippet. Anatomy - ui, server, shinyApp
# 2 hello world - introduce input$x output$x ----
# 3 # add some (static) R part 1 ----
# 4 # add some (static) R part 2 ----
# 5 # # add some (static) R part 3 ----

# S2
# shiny goal: make the dashboard more useful - let's compare orgs rather than looking at overall data

# learning outcomes
## consolidate, build fluency 
### remind about the function pairs
### additional selections(type and org)
### specifics of managing datatable options
## more ambitious server stuff, then turning server things into functions


# add interactivity 1----

# 0. figure out code to compare orgs for a type

# ae_attendances %>%
#   filter(org_code %in% c("RF4", "RAP") & type == "1") %>%
#   ggplot() +
#   geom_line(aes(x = period, y = attendances, color = org_code))

# 1. put some basic UI together with this static R code
# 2. add interactivity to that plot
# 3. tweak to allow >1 org at once, add all the types
# 4. add a benchmarking line
# 5. convert to plotly, and add missing orgs



s3 - all in the script
## structure/architecture - sourcing R script
## converting R scripts to play nicely with Shiny
## shiny pretty well stays the same
## isolate()


# s4

## shinydashboard syntax
## building out graphs from data / storytelling
## finishing touches