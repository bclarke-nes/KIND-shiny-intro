---
title: "KIND Shiny intro - session 01"
author: "Brendan Clarke"
format: 
    revealjs:
        logo: "../images/KLN_banner_v04_700.png"
        css: logo.css
scrollable: true
smaller: true
execute: 
    echo: true
    eval: false
---
## About this course
This is an accessible introduction to Shiny

+ Social

::: {.callout-note}
Cameras on as much as possible, please
:::

+ Collaborative, particularly for troubleshooting
+ Assumes basic familiarity with R and Posit/Rstudio

## Session 1 outline
1. getting started with Posit
2. 5 minute introduction to Shiny
3. dashboard demo 
4. R vs Shiny
5. `app.R` / "hello world"
6. `input$x` / `output$x` syntax
7. graphs and data tables
8. interactivity

## Session milestones
1. dashboard demo
2. app.R
3. hello world
4. `input$x` / `output$x` syntax
5. add a graph
6. add a data table
7. first interactivity

## Helpful resources
+ [Posit Cheatsheet](https://posit.co/wp-content/uploads/2022/10/rstudio-ide-1.pdf)
+ [Shiny Cheatsheet](https://shiny.rstudio.com/images/shiny-cheatsheet.pdf)
+ [Mastering Shiny](https://mastering-shiny.org/index.html)

## Set-up
1. Log-in to Posit Cloud
2. Create a new project from this URL: [https://github.com/bclarke-nes/KIND-shiny-intro](https://github.com/bclarke-nes/KIND-shiny-intro)

## What's Shiny

+ R package for interactive, web-based, app development
+ Example applications:
  + real-time dashboards
  + interactive tools
  + self-service data portal
  + data-driven web apps (e.g. allowing users to upload and process data)

+ Health and social care examples
  + [PHS ScotPHO](https://scotland.shinyapps.io/ScotPHO_profiles_tool/)
  + [NTI dashboard](https://scotland.shinyapps.io/nhs-prescribing-nti/)
  
## Deploying Shiny
+ Run dashboards locally 
+ Share code for local use
+ Share code more widely (e.g. [revtools](https://revtools.net/) package)
* Publish apps:
  * via open SaaS platforms, like [shinyapps.io](https://www.shinyapps.io/)
  * Dedicated platforms via Shiny server, SPACe Analytical Workbench...

::: {.callout-tip}

Great primer on deploying Shiny: [Rstudio Shiny tutorial](https://shiny.rstudio.com/tutorial/written-tutorial/lesson7/)

:::

  
## Dashboard demo

![](../images/dd_preview.png){fig-align="center"}

(we'll be at this point in two weeks)

## Milestone 01
```{r}
#| echo: true
#| eval: false
#| file: ../milestones/shiny_intro_s01_ms_01.R
```

## R vs Shiny

::: {.callout-warning}

While Shiny's syntax looks very similar to R, the programming approach is totally different.

:::

R is usually **imperative** - "do the following things in this order..."

Shiny is **declarative** - "here are our goals and constraints..." 

> With imperative code you say “Make me a sandwich”. With declarative code you say “Ensure there is a sandwich in the refrigerator whenever I look inside of it”. Imperative code is assertive; declarative code is passive-aggressive.

[Mastering Shiny ch. 3](https://mastering-shiny.org/basic-reactivity.html#imperative-vs-declarative-programming)

## First steps

1. Create a new (empty) file called `app.R`
2. click in the source pane, and start typing `Shiny`...

![](..//images//image-2077227059.png){fig-align="center"}

## Milestone 02
```{r}
#| echo: true
#| eval: false
#| file: ../milestones/shiny_intro_s01_ms_02.R
```

## Milestone 03
```{r}
#| echo: true
#| eval: false
#| file: ../milestones/shiny_intro_s01_ms_03.R
```

+ Note the `output$message` - this is how we pass the body of the message to the `textOutput` part of the UI

::: {.callout-tip}

`ctrl`+`shift`+`enter` to run your app

:::


## `diffr`

![](../images/diffr.png){fig-align="center"}

## Anatomy of a Shiny app

We need at least three elements for a Shiny app:

1. UI - containing the code for the front-end user interface
2. Server - containing the code for the back-end (e.g. plotting graphs etc)
3. Call to `shinyApp` - that launches the app

These can be split into separate files, or contained in one `app.R` script. We'll start with the single file for now, but will start to split things up as our scripts grow.

## Function pairs

Reactivity uses pairs of functions to pass things (user input, graphs, text) between server and UI

+ `input$x` and `output$x` syntax


## Milestone 04
```{r}
#| echo: true
#| eval: false
#| file: ../milestones/shiny_intro_s01_ms_04.R
```

+ `renderText` to pass the output of the standard R code lines 10-12 to `output$mean_att`
+ `textOutput("mean_att")` to insert that output in the UI. 
+ `container=span` keeps text inline

## Add a graph

Let's now add a second pair of functions:

+ add `plotOutput()` to the UI (separated from the `textOutput()` by a comma)
  + add `"att_period"` inside `plotOutput()`
+ add `renderPlot()` to the server, assigned to `output$att_period`

#### Code snippet inside the `renderPlot()`

```{r}
ae_attendances %>%
      group_by(period) %>%
      summarise(attendances = sum(attendances)) %>%
      ggplot(aes(x = period, y = attendances)) +
      geom_line() +
      geom_smooth()
```

## Milestone 05
```{r}
#| echo: true
#| eval: false
#| file: ../milestones/shiny_intro_s01_ms_05.R
```

## Add a data table

Let's add a data table, using `dataTableOutput()` and `renderDataTable()`

#### Code snippet inside `renderDataTable()`

```{r}
ae_attendances %>%
     filter(org_code == "RF4") %>%
     group_by(year = year(period)) %>%
     summarise(attendances = sum(attendances))
```

## Milestone 06
```{r}
#| echo: true
#| eval: false
#| file: ../milestones/shiny_intro_s01_ms_06.R
```

This is all very static. Let's try to add some interactivity...

## User input

There are many ways to collect user input in Shiny. We'll start with something simple to allow our user to choose an org. We'll need to add three things:

+ a vector of orgs for the user to choose from
+ `radioButtons()` function in the `ui()`
+ an update to the `server()` to capture the chosen org

#### orgs
Add the vector in the head of your `app.R`: 

```{r}
orgs <- c("RF4", "R1H", "RQM")
```

## `radioButtons()` UI

Here's (part) of the man page for `radioButtons()`

```{r}
radioButtons(
  inputId,
  label,
  choices = NULL,
  selected = NULL)
```

We'll need to add:

+ `inputId` = what our app will call the input. Use `org_code`
+ `label` = what our user will see as the input name. Use whatever you like!
+ `choices` = the choices available. Use `orgs`
+ `selected` = the default selection. Use `orgs[1]` to default select the first item.

## `radioButtons()` server

We need to make the same change three times in `server()`. Each of our three `renderSomething()` functions currently have a line filtering the data for RF4:

```{r}
filter(org_code == "RF4") %>%
```

We need to change that to filter on `input$org_code`

```{r}
filter(org_code == input$org_code)
```

::: {.callout-note}
Don't forget to run your app
:::

## Milestone 07
```{r}
#| echo: true
#| eval: false
#| file: ../milestones/shiny_intro_s01_ms_07.R
```

## Next time!

+ adding extra user input elements
+ doing more interesting things with our R code
+ building out our dashboard project

  
 <!-- all milestones included -->
